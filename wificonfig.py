# Generates Wi-Fi configuration files
import os.path
import shutil
from xml.etree import ElementTree as ET
from xml.dom import minidom
import secrets


class WifiNetwork():
    __username: str
    __password: str
    __authentication: str
    __encryption: str
    __networkname: str
    __macrandomization: bool

    def __init__(self, networkname, encryption, protocol,  password=None,macrandomization=None) -> None:
        self.__password = password
        self.__networkname = networkname
        self.__authentication = protocol
        self.__encryption = encryption
        self.__macrandomization=macrandomization
        self.__root = ET.Element("WLANProfile", {"xmlns": "http://www.microsoft.com/networking/WLAN/profile/v1"})
        self.createconfigs()

    @staticmethod
    def tohex(to_convert: str):
        """
        Converts a string to its hexadecimal form
        :return: Hex string
        """
        # encoding it in byte format
        to_convert = to_convert.encode('utf-8')

        return to_convert.hex()

    def write(self):
        filename=f"Wi-Fi-{self.__networkname}.xml"
        out = ET.tostring(self.__root)
        dom = minidom.parseString(out)

        xml_str = dom.toprettyxml(encoding="utf-8", indent="\t")

        with open(filename, "wb") as f:
            f.write(xml_str)
        currentdir=os.path.join(os.getcwd(),filename)
        destination=os.path.join(os.getcwd(),"$OEM$",filename)
        destinationdir=os.path.join(os.getcwd(),"$OEM$")
        os.makedirs(destinationdir,exist_ok=True)
        shutil.move(currentdir,destination)
    @staticmethod
    def macseed() -> int:
        """
        Generates a random number that suits being a seed. This is being generated by the random generator in the
        Operating System itself as opposed to Python

        :return: A 10 digit random number
        """
        secretsgen = secrets.SystemRandom()
        return secretsgen.randrange(1000000000,9999999999)

    def createconfigs(self):
        ET.SubElement(self.__root, 'name').text = self.__networkname
        # SSID Config
        ssidconfig = ET.SubElement(self.__root, "SSIDConfig")
        ssid = ET.SubElement(ssidconfig, "SSID")
        ET.SubElement(ssid, "hex").text = self.tohex(self.__networkname)
        ET.SubElement(ssid,"name").text = self.__networkname
        ET.SubElement(self.__root, "connectionType").text = "ESS"
        ET.SubElement(self.__root, "connectionMode").text = "auto"
        msm = ET.SubElement(self.__root, "MSM")

        # Security
        security = ET.SubElement(msm, "security")
        auth_encryption = ET.SubElement(security, "auth_encryption")
        ET.SubElement(auth_encryption, "authentication").text = self.__authentication
        ET.SubElement(auth_encryption, "encryption").text = self.__encryption
        ET.SubElement(auth_encryption, "useOneX").text = "false"
        # if a password is needed
        if self.__password is not None:
            sharedkey=ET.SubElement(security,"sharedKey")
            ET.SubElement(sharedkey,"keyType").text="passPhrase"
            ET.SubElement(sharedkey,"protected").text="false"
            ET.SubElement(sharedkey,"keyMaterial").text=self.__password

        # MacRandomization
        macrandom = ET.SubElement(self.__root, "MacRandomization", {"xmlns": "http://www.microsoft.com/networking/WLAN/profile/v3"})
        ET.SubElement(macrandom,"enableRandomization").text= "false" if self.__macrandomization is None or False else "true"
        ET.SubElement(macrandom,"randomizationSeed").text=str(self.macseed())

    @property
    def networkname(self):
        return self.__networkname
    @staticmethod
    def createcmd(networks:list)->None:
        with open("wifi.cmd","w") as f:
            for network in networks:
                if isinstance(network,WifiNetwork):
                    print(f'netsh wlan add profile filename="C:\Wi-Fi-{network.networkname}.xml"',file=f)

        currentfile = os.path.join(os.getcwd(), "wifi.cmd")
        destinationdir=os.path.join(os.getcwd(),"$OEM$")
        os.makedirs(destinationdir,exist_ok=True)
        destfile=os.path.join(destinationdir,"wifi.cmd")
        shutil.move(currentfile,destfile)

        # create a new file that will list out all the networks currently in reach and connect to next one,then sleep
        # for a couple secs
        with open ("connectandsleep.cmd","w") as f:
            print("netsh wlan show networks",file=f)
            print("timeout 2",file=f)
            print(f"netsh wlan connect ssid={networks[0].networkname} name={networks[0].networkname}",file=f)
            print("timeout 4", file=f)
        currentfile = os.path.join(os.getcwd(), "connectandsleep.cmd")
        destfile = os.path.join(destinationdir, "connectandsleep.cmd")
        shutil.move(currentfile, destfile)

    @staticmethod
    def protocols()->list:
        return ["WPA2PSK","WPA2Enterprise","WPA3PSK"]






if __name__=="__main__":
    tesztwifi=WifiNetwork("NET5","none","open")
    tesztwifi.write()
    masikteszt=WifiNetwork("vgfgth","AES","WPA2PSK","fgftuzhgghvgh")
    masikteszt.write()
    WifiNetwork.createcmd([tesztwifi,masikteszt])